Enabled minor modes: Auto-Composition Auto-Compression Auto-Encryption
Blink-Cursor Column-Number Company Company-Quickhelp
Company-Quickhelp-Local Display-Line-Numbers Eldoc Electric-Indent
Elpy File-Name-Shadow Flycheck Font-Lock Global-Company
Global-Display-Line-Numbers Global-Eldoc Global-Flycheck
Global-Font-Lock Global-Git-Commit Highlight-Indentation
Imagex-Global-Sticky Imagex-Sticky Line-Number Magit-Auto-Revert
Menu-Bar Mouse-Wheel Override-Global Pyvenv Shell-Dirtrack Show-Paren
Tool-Bar Tooltip Transient-Mark Windmove Yas

(Information about these minor modes follows the major mode info.)

Python mode defined in ‘python.el’:
Major mode for editing Python files.

key             binding
---             -------

C-c		Prefix Command
ESC		Prefix Command
DEL		python-indent-dedent-line-backspace
<backtab>	python-indent-dedent-line
<remap>		Prefix Command

C-M-i		completion-at-point
  (this binding is currently shadowed)
C-M-x		python-shell-send-defun

C-c C-c		python-shell-send-buffer
  (this binding is currently shadowed)
C-c C-d		python-describe-at-point
  (this binding is currently shadowed)
C-c C-e		python-shell-send-statement
  (this binding is currently shadowed)
C-c C-f		python-eldoc-at-point
  (this binding is currently shadowed)
C-c C-j		imenu
C-c C-l		python-shell-send-file
C-c C-p		run-python
  (this binding is currently shadowed)
C-c C-r		python-shell-send-region
  (this binding is currently shadowed)
C-c C-s		python-shell-send-string
  (this binding is currently shadowed)
C-c C-t		Prefix Command
  (this binding is currently shadowed)
C-c C-v		python-check
  (this binding is currently shadowed)
C-c C-z		python-shell-switch-to-shell
  (this binding is currently shadowed)
C-c <		python-indent-shift-left
C-c >		python-indent-shift-right

<remap> <backward-sentence>	python-nav-backward-block
<remap> <backward-up-list>	python-nav-backward-up-list
<remap> <forward-sentence>	python-nav-forward-block
<remap> <mark-defun>		python-mark-defun

C-M-q		prog-indent-sexp



In addition to any hooks its parent mode ‘prog-mode’ might have run,
this mode runs the hook ‘python-mode-hook’, as the final or
penultimate step during initialization.

Auto-Composition minor mode (no indicator):
Toggle Auto Composition mode.

This is a minor mode.  If called interactively, toggle the
‘Auto-Composition mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘auto-composition-mode’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

When Auto Composition mode is enabled, text characters are
automatically composed by functions registered in
‘composition-function-table’.

You can use ‘global-auto-composition-mode’ to turn on
Auto Composition mode in all buffers (this is the default).

Auto-Compression minor mode (no indicator):
Toggle Auto Compression mode.

This is a minor mode.  If called interactively, toggle the
‘Auto-Compression mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'auto-compression-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

Auto Compression mode is a global minor mode.  When enabled,
compressed files are automatically uncompressed for reading, and
compressed when writing.

Auto-Encryption minor mode (no indicator):
Toggle automatic file encryption/decryption (Auto Encryption mode).

This is a minor mode.  If called interactively, toggle the
‘Auto-Encryption mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'auto-encryption-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

Blink-Cursor minor mode (no indicator):
Toggle cursor blinking (Blink Cursor mode).

This is a minor mode.  If called interactively, toggle the
‘Blink-Cursor mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'blink-cursor-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

If the value of ‘blink-cursor-blinks’ is positive (10 by default),
the cursor stops blinking after that number of blinks, if Emacs
gets no input during that time.

See also ‘blink-cursor-interval’ and ‘blink-cursor-delay’.

This command is effective only on graphical frames.  On text-only
terminals, cursor blinking is controlled by the terminal.

Column-Number minor mode (no indicator):
Toggle column number display in the mode line (Column Number mode).

This is a minor mode.  If called interactively, toggle the
‘Column-Number mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'column-number-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

See ‘mode-line-position-column-format’ for how this number is
presented.

Company minor mode (no indicator):
"complete anything"; is an in-buffer completion framework.
Completion starts automatically, depending on the values
‘company-idle-delay’ and ‘company-minimum-prefix-length’.

This is a minor mode.  If called interactively, toggle the
‘Company mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘company-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Completion can be controlled with the commands:
‘company-complete-common’, ‘company-complete-selection’, ‘company-complete’,
‘company-select-next’, ‘company-select-previous’.  If these commands are
called before ‘company-idle-delay’, completion will also start.

Completions can be searched with ‘company-search-candidates’ or
‘company-filter-candidates’.  These can be used while completion is
inactive, as well.

The completion data is retrieved using ‘company-backends’ and displayed
using ‘company-frontends’.  If you want to start a specific backend, call
it interactively or use ‘company-begin-backend’.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or ‘company-transformers’ changes it later.

regular keymap (‘company-mode-map’):

key             binding
---             -------


keymap during active completions (‘company-active-map’):

key             binding
---             -------

C-d		company-show-doc-buffer
C-g		company-abort
C-h		company-show-doc-buffer
TAB		company-complete-common
RET		company-complete-selection
C-n		company-select-next-or-abort
C-p		company-select-previous-or-abort
C-s		company-search-candidates
C-w		company-show-location
ESC		Prefix Command
<down>		company-select-next-or-abort
<down-mouse-1>	ignore
<down-mouse-3>	ignore
<f1>		company-show-doc-buffer
<mouse-1>	company-complete-mouse
<mouse-3>	company-select-mouse
<remap>		Prefix Command
<return>	company-complete-selection
<tab>		company-complete-common
<up>		company-select-previous-or-abort
<up-mouse-1>	ignore
<up-mouse-3>	ignore

<remap> <scroll-down-command>	company-previous-page
<remap> <scroll-up-command>	company-next-page

C-M-s		company-filter-candidates
ESC ESC		Prefix Command
M-0 .. M-9	company-complete-quick-access
M-n		company--select-next-and-warn
M-p		company--select-previous-and-warn

M-ESC ESC	company-abort



Company-Quickhelp minor mode (no indicator):
Toggle Company-Quickhelp-Local mode in all buffers.
With prefix ARG, enable Company-Quickhelp mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Company-Quickhelp-Local mode is enabled in all buffers where
‘company-quickhelp-local-mode’ would do it.

See ‘company-quickhelp-local-mode’ for more information on
Company-Quickhelp-Local mode.

Company-Quickhelp-Local minor mode (no indicator):
Provides documentation popups for ‘company-mode’ using ‘pos-tip’.

This is a minor mode.  If called interactively, toggle the
‘Company-Quickhelp-Local mode’ mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘company-quickhelp-local-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Display-Line-Numbers minor mode (no indicator):
Toggle display of line numbers in the buffer.
This uses ‘display-line-numbers’ internally.

This is a minor mode.  If called interactively, toggle the
‘Display-Line-Numbers mode’ mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘display-line-numbers-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

To change the type of line numbers displayed by default,
customize ‘display-line-numbers-type’.  To change the type while
the mode is on, set ‘display-line-numbers’ directly.

Eldoc minor mode (no indicator):
Toggle echo area display of Lisp objects at point (ElDoc mode).

This is a minor mode.  If called interactively, toggle the ‘Eldoc
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘eldoc-mode’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

ElDoc mode is a buffer-local minor mode.  When enabled, the echo
area displays information about a function or variable in the
text where point is.  If point is on a documented variable, it
displays the first line of that variable’s doc string.  Otherwise
it displays the argument list of the function called in the
expression point is on.

Electric-Indent minor mode (no indicator):
Toggle on-the-fly reindentation of text lines (Electric Indent mode).

This is a minor mode.  If called interactively, toggle the
‘Electric-Indent mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'electric-indent-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

When enabled, this reindents whenever the hook ‘electric-indent-functions’
returns non-nil, or if you insert one of the "electric characters".
The electric characters normally include the newline, but can
also include other characters as needed by the major mode; see
‘electric-indent-chars’ for the actual list.

By "reindent" we mean remove any existing indentation, and then
indent the line according to context and rules of the major mode.

This is a global minor mode.  To toggle the mode in a single buffer,
use ‘electric-indent-local-mode’.

Elpy minor mode (indicator Elpy):
Minor mode in Python buffers for the Emacs Lisp Python Environment.

This is a minor mode.  If called interactively, toggle the ‘Elpy
mode’ mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘elpy-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

This mode fully supports virtualenvs. Once you switch a
virtualenv using M-x pyvenv-workon, you can use
M-x elpy-rpc-restart to make the elpy Python process use your
virtualenv.

key             binding
---             -------

C-c		Prefix Command
C-x		Prefix Command
ESC		Prefix Command
C-S-<return>	elpy-open-and-indent-line-above
C-<down>	elpy-nav-forward-block
C-<left>	elpy-nav-backward-indent
C-<return>	elpy-shell-send-statement-and-step
C-<right>	elpy-nav-forward-indent
C-<up>		elpy-nav-backward-block
M-<down>	elpy-nav-move-line-or-region-down
M-<left>	elpy-nav-indent-shift-left
M-<right>	elpy-nav-indent-shift-right
M-<up>		elpy-nav-move-line-or-region-up
S-<return>	elpy-open-and-indent-line-below

C-M-i		elpy-company-backend
M-*		xref-pop-marker-stack

C-x 4		Prefix Command

C-c C-b		elpy-nav-expand-to-indentation
C-c C-c		elpy-shell-send-region-or-buffer
C-c C-d		elpy-doc
C-c C-e		elpy-multiedit-python-symbol-at-point
C-c C-f		elpy-find-file
C-c C-k		elpy-shell-kill-all
C-c RET		elpy-importmagic-add-import
C-c C-n		elpy-flymake-next-error
C-c C-o		elpy-occur-definitions
C-c C-p		elpy-flymake-previous-error
C-c C-r		Prefix Command
C-c C-s		elpy-rgrep-symbol
C-c C-t		elpy-test
C-c C-u		elpy-pdb-map
C-c C-v		elpy-check
C-c C-x		Prefix Command
C-c C-y		elpy-shell-map
C-c C-z		elpy-shell-switch-to-shell
C-c @		Prefix Command

C-x 4 ESC	Prefix Command

C-c C-u b	elpy-pdb-toggle-breakpoint-at-point
C-c C-u d	elpy-pdb-debug-buffer
C-c C-u e	elpy-pdb-debug-last-exception
C-c C-u p	elpy-pdb-break-at-point

C-c C-y C-b	elpy-shell-send-buffer-and-step
C-c C-y C-c	elpy-shell-send-defclass-and-step
C-c C-y C-e	elpy-shell-send-statement-and-step
C-c C-y C-f	elpy-shell-send-defun-and-step
C-c C-y C-o	elpy-shell-send-group-and-step
C-c C-y C-r	elpy-shell-send-region-or-buffer-and-step
C-c C-y C-s	elpy-shell-send-top-statement-and-step
C-c C-y C-w	elpy-shell-send-codecell-and-step
C-c C-y B	elpy-shell-send-buffer-and-go
C-c C-y C	elpy-shell-send-defclass-and-go
C-c C-y E	elpy-shell-send-statement-and-go
C-c C-y F	elpy-shell-send-defun-and-go
C-c C-y O	elpy-shell-send-group-and-go
C-c C-y R	elpy-shell-send-region-or-buffer-and-go
C-c C-y S	elpy-shell-send-top-statement-and-go
C-c C-y W	elpy-shell-send-codecell-and-go
C-c C-y b	elpy-shell-send-buffer
C-c C-y c	elpy-shell-send-defclass
C-c C-y e	elpy-shell-send-statement
C-c C-y f	elpy-shell-send-defun
C-c C-y o	elpy-shell-send-group
C-c C-y r	elpy-shell-send-region-or-buffer
C-c C-y s	elpy-shell-send-top-statement
C-c C-y w	elpy-shell-send-codecell
C-c C-y C-S-b	elpy-shell-send-buffer-and-step-and-go
C-c C-y C-S-c	elpy-shell-send-defclass-and-step-and-go
C-c C-y C-S-e	elpy-shell-send-statement-and-step-and-go
C-c C-y C-S-f	elpy-shell-send-defun-and-step-and-go
C-c C-y C-S-o	elpy-shell-send-group-and-step-and-go
C-c C-y C-S-r	elpy-shell-send-region-or-buffer-and-step-and-go
C-c C-y C-S-s	elpy-shell-send-top-statement-and-step-and-go
C-c C-y C-S-w	elpy-shell-send-codecell-and-step-and-go

C-c C-x c	elpy-django-command
C-c C-x r	elpy-django-runserver

C-c C-r f	elpy-refactor-extract-function
C-c C-r i	elpy-refactor-inline
C-c C-r r	elpy-refactor-rename
C-c C-r v	elpy-refactor-extract-variable

C-c @ C-b	elpy-folding-toggle-docstrings
C-c @ C-c	elpy-folding-toggle-at-point
C-c @ C-f	elpy-folding-hide-leafs
C-c @ RET	elpy-folding-toggle-comments

C-x 4 M-.	xref-find-definitions-other-window



File-Name-Shadow minor mode (no indicator):
Toggle file-name shadowing in minibuffers (File-Name Shadow mode).

This is a minor mode.  If called interactively, toggle the
‘File-Name-Shadow mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'file-name-shadow-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

File-Name Shadow mode is a global minor mode.  When enabled, any
part of a filename being read in the minibuffer that would be
ignored (because the result is passed through
‘substitute-in-file-name’) is given the properties in
‘file-name-shadow-properties’, which can be used to make that
portion dim, invisible, or otherwise less visually noticeable.

Flycheck minor mode (indicator FlyC:0|3):
Flycheck is a minor mode for on-the-fly syntax checking.

In ‘flycheck-mode’ the buffer is automatically syntax-checked
using the first suitable syntax checker from ‘flycheck-checkers’.
Use ‘flycheck-select-checker’ to select a checker for the current
buffer manually.

If you run into issues, use ‘M-x flycheck-verify-setup’ to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
‘https://www.flycheck.org/en/latest/’.  Please report issues and
request features at URL ‘https://github.com/flycheck/flycheck’.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

‘FlyC’     This buffer has not been checked yet.
‘FlyC-’    Flycheck doesn’t have a checker for this buffer.
‘FlyC*’    Flycheck is running.  Expect results soon!
‘FlyC:3|2’ This buffer contains three warnings and two errors.
           Use ‘M-x flycheck-list-errors’ to see the list.

You may also see the following icons:
‘FlyC!’    The checker crashed.
‘FlyC.’    The last syntax check was manually interrupted.
‘FlyC?’    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in ‘flycheck-mode’:

key             binding
---             -------

C-c		Prefix Command

C-c !		Prefix Command

C-c ! C-c	flycheck-compile
C-c ! C-w	flycheck-copy-errors-as-kill
C-c ! ?		flycheck-describe-checker
C-c ! C		flycheck-clear
C-c ! H		display-local-help
C-c ! V		flycheck-version
C-c ! c		flycheck-buffer
C-c ! e		flycheck-explain-error-at-point
C-c ! h		flycheck-display-error-at-point
C-c ! i		flycheck-manual
C-c ! l		flycheck-list-errors
C-c ! n		flycheck-next-error
C-c ! p		flycheck-previous-error
C-c ! s		flycheck-select-checker
C-c ! v		flycheck-verify-setup
C-c ! x		flycheck-disable-checker


(you can change the prefix by customizing
‘flycheck-keymap-prefix’)

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

Font-Lock minor mode (no indicator):
Toggle syntax highlighting in this buffer (Font Lock mode).

This is a minor mode.  If called interactively, toggle the ‘Font-Lock
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘font-lock-mode’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

When Font Lock mode is enabled, text is fontified as you type it:

 - Comments are displayed in ‘font-lock-comment-face’;
 - Strings are displayed in ‘font-lock-string-face’;
 - Certain other expressions are displayed in other faces
   according to the value of the variable ‘font-lock-keywords’.

To customize the faces (colors, fonts, etc.) used by Font Lock for
fontifying different parts of buffer text, use M-x customize-face.

You can enable Font Lock mode in any major mode automatically by
turning on in the major mode’s hook.  For example, put in your
~/.emacs:

 (add-hook 'c-mode-hook 'turn-on-font-lock)

Alternatively, you can use Global Font Lock mode to automagically
turn on Font Lock mode in buffers whose major mode supports it
and whose major mode is one of ‘font-lock-global-modes’.  For
example, put in your ~/.emacs:

 (global-font-lock-mode t)

Where major modes support different levels of fontification, you
can use the variable ‘font-lock-maximum-decoration’ to specify
which level you generally prefer.  When you turn Font Lock mode
on/off the buffer is fontified/defontified, though fontification
occurs only if the buffer is less than ‘font-lock-maximum-size’.

To add your own highlighting for some major mode, and modify the
highlighting selected automatically via the variable
‘font-lock-maximum-decoration’, you can use
‘font-lock-add-keywords’.

To fontify a buffer, without turning on Font Lock mode and
regardless of buffer size, you can use M-x font-lock-fontify-buffer.

To fontify a block (the function or paragraph containing point,
or a number of lines around point), perhaps because modification
on the current line caused syntactic change on other lines, you
can use M-x font-lock-fontify-block.

You can set your own default settings for some mode, by setting a
buffer local value for ‘font-lock-defaults’, via its mode hook.

The above is the default behavior of ‘font-lock-mode’; you may
specify your own function which is called when ‘font-lock-mode’
is toggled via ‘font-lock-function’.

Global-Company minor mode (no indicator):
Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Company mode is enabled in all buffers where ‘company-mode-on’ would
do it.

See ‘company-mode’ for more information on Company mode.

Global-Display-Line-Numbers minor mode (no indicator):
Toggle Display-Line-Numbers mode in all buffers.
With prefix ARG, enable Global Display-Line-Numbers mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Display-Line-Numbers mode is enabled in all buffers where
‘display-line-numbers--turn-on’ would do it.

See ‘display-line-numbers-mode’ for more information on
Display-Line-Numbers mode.

Global-Eldoc minor mode (no indicator):
Toggle Eldoc mode in all buffers.
With prefix ARG, enable Global Eldoc mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Eldoc mode is enabled in all buffers where ‘turn-on-eldoc-mode’ would
do it.

See ‘eldoc-mode’ for more information on Eldoc mode.

Global-Flycheck minor mode (no indicator):
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where ‘flycheck-mode-on-safe’
would do it.

See ‘flycheck-mode’ for more information on Flycheck mode.

Global-Font-Lock minor mode (no indicator):
Toggle Font-Lock mode in all buffers.
With prefix ARG, enable Global Font-Lock mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Font-Lock mode is enabled in all buffers where
‘turn-on-font-lock-if-desired’ would do it.

See ‘font-lock-mode’ for more information on Font-Lock mode.

Global-Git-Commit minor mode (no indicator):
Edit Git commit messages.

This is a minor mode.  If called interactively, toggle the
‘Global Git-Commit mode’ mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'global-git-commit-mode)’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

This global mode arranges for ‘git-commit-setup’ to be called
when a Git commit message file is opened.  That usually happens
when Git uses the Emacsclient as $GIT_EDITOR to have the user
provide such a commit message.

Loading the library ‘git-commit’ by default enables this mode,
but the library is not automatically loaded because doing that
would pull in many dependencies and increase startup time too
much.  You can either rely on ‘magit’ loading this library or
you can load it explicitly.  Autoloading is not an alternative
because in this case autoloading would immediately trigger
full loading.

Highlight-Indentation minor mode (indicator ||):
Highlight indentation minor mode highlights indentation based on spaces

This is a minor mode.  If called interactively, toggle the
‘Highlight-Indentation mode’ mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘highlight-indentation-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Imagex-Global-Sticky minor mode (no indicator):
Toggle Imagex-Sticky mode in all buffers.
With prefix ARG, enable Imagex-Global-Sticky mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is ‘toggle’.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Imagex-Sticky mode is enabled in all buffers where
‘imagex-sticky-mode-maybe’ would do it.

See ‘imagex-sticky-mode’ for more information on Imagex-Sticky mode.

Imagex-Sticky minor mode (no indicator):
To manipulate Image at point.

This is a minor mode.  If called interactively, toggle the
‘Imagex-Sticky mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘imagex-sticky-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Line-Number minor mode (no indicator):
Toggle line number display in the mode line (Line Number mode).

This is a minor mode.  If called interactively, toggle the
‘Line-Number mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'line-number-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

Line numbers do not appear for very large buffers and buffers
with very long lines; see variables ‘line-number-display-limit’
and ‘line-number-display-limit-width’.

See ‘mode-line-position-line-format’ for how this number is
presented.

Magit-Auto-Revert minor mode (no indicator):
Toggle Magit Auto Revert mode.
If called interactively, enable Magit Auto Revert mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is ‘toggle’; disable the mode otherwise.

Magit Auto Revert mode is a global minor mode that reverts
buffers associated with a file that is located inside a Git
repository when the file changes on disk.  Use ‘auto-revert-mode’
to revert a particular buffer.  Or use ‘global-auto-revert-mode’
to revert all file-visiting buffers, not just those that visit
a file located inside a Git repository.

This global mode works by turning on the buffer-local mode
‘auto-revert-mode’ at the time a buffer is first created.  The
local mode is turned on if the visited file is being tracked in
a Git repository at the time when the buffer is created.

If ‘magit-auto-revert-tracked-only’ is non-nil (the default),
then only tracked files are reverted.  But if you stage a
previously untracked file using ‘magit-stage’, then this mode
notices that.

Unlike ‘global-auto-revert-mode’, this mode never reverts any
buffers that are not visiting files.

The behavior of this mode can be customized using the options
in the ‘autorevert’ and ‘magit-autorevert’ groups.

This function calls the hook ‘magit-auto-revert-mode-hook’.

Like nearly every mode, this mode should be enabled or disabled
by calling the respective mode function, the reason being that
changing the state of a mode involves more than merely toggling
a single switch, so setting the mode variable is not enough.
Also, you should not use ‘after-init-hook’ to disable this mode.

Menu-Bar minor mode (no indicator):
Toggle display of a menu bar on each frame (Menu Bar mode).

This is a minor mode.  If called interactively, toggle the ‘Menu-Bar
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘menu-bar-mode’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

This command applies to all frames that exist and frames to be
created in the future.

Mouse-Wheel minor mode (no indicator):
Toggle mouse wheel support (Mouse Wheel mode).

This is a minor mode.  If called interactively, toggle the
‘Mouse-Wheel mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'mouse-wheel-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

Override-Global minor mode (no indicator):
A minor mode for allowing keybindings to override other modes.
The main purpose of this mode is to simplify bindings keys in
such a way that they take precedence over other modes.

This is a minor mode.  If called interactively, toggle the
‘Override-Global mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘override-global-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

To achieve this, the keymap ‘override-global-map’ is added to
‘emulation-mode-map-alists’, which makes it take precedence over
keymaps in ‘minor-mode-map-alist’.  Thereby, key bindings get an
even higher precedence than global key bindings defined with
‘keymap-global-set’ (or, in Emacs 28 or older, ‘global-set-key’).

The macro ‘bind-key*’ (which see) provides a convenient way to
add keys to that keymap.

Pyvenv minor mode (no indicator):
Global minor mode for pyvenv.

This is a minor mode.  If called interactively, toggle the
‘Pyvenv mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'pyvenv-mode)’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Will show the current virtualenv in the mode line, and respect a
‘pyvenv-workon’ setting in files.

Shell-Dirtrack minor mode (no indicator):
Toggle directory tracking in this shell buffer (Shell Dirtrack mode).

This is a minor mode.  If called interactively, toggle the
‘Shell-Dirtrack mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘shell-dirtrack-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

The ‘dirtrack’ package provides an alternative implementation of
this feature; see the function ‘dirtrack-mode’.

Show-Paren minor mode (no indicator):
Toggle visualization of matching parens (Show Paren mode).

This is a minor mode.  If called interactively, toggle the ‘Show-Paren
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'show-paren-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

When enabled, any matching parenthesis is highlighted in ‘show-paren-style’
after ‘show-paren-delay’ seconds of Emacs idle time.

This is a global minor mode.  To toggle the mode in a single buffer,
use ‘show-paren-local-mode’.

Tool-Bar minor mode (no indicator):
Toggle the tool bar in all graphical frames (Tool Bar mode).

This is a minor mode.  If called interactively, toggle the ‘Tool-Bar
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘tool-bar-mode’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

See ‘tool-bar-add-item’ and ‘tool-bar-add-item-from-menu’ for
conveniently adding tool bar items.

Tooltip minor mode (no indicator):
Toggle Tooltip mode.

This is a minor mode.  If called interactively, toggle the ‘Tooltip
mode’ mode.  If the prefix argument is positive, enable the mode, and
if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'tooltip-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

When this global minor mode is enabled, Emacs displays help
text (e.g. for buttons and menu items that you put the mouse on)
in a pop-up window.

When Tooltip mode is disabled, Emacs displays help text in the
echo area, instead of making a pop-up window.

Transient-Mark minor mode (no indicator):
Toggle Transient Mark mode.

This is a minor mode.  If called interactively, toggle the
‘Transient-Mark mode’ mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the
mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'transient-mark-mode)’.

The mode’s hook is called both when the mode is enabled and when it is
disabled.

Transient Mark mode is a global minor mode.  When enabled, the
region is highlighted with the ‘region’ face whenever the mark
is active.  The mark is "deactivated" after certain non-motion
commands, including those that change the text in the buffer, and
during shift or mouse selection by any unshifted cursor motion
command (see Info node ‘Shift Selection’ for more details).

You can also deactivate the mark by typing C-g or
M-ESC ESC.

Many commands change their behavior when Transient Mark mode is
in effect and the mark is active, by acting on the region instead
of their usual default part of the buffer’s text.  Examples of
such commands include M-;, M-x flush-lines, M-x keep-lines,
M-%, C-M-%, M-x ispell, and C-x u.
To see the documentation of commands that are sensitive to the
Transient Mark mode, invoke C-h d and type "transient"
or "mark.*active" at the prompt.

Windmove minor mode (no indicator):
Global minor mode for default windmove commands.

This is a minor mode.  If called interactively, toggle the
‘Windmove mode’ mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘(default-value 'windmove-mode)’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

Yas minor mode (no indicator):
Toggle YASnippet mode.

This is a minor mode.  If called interactively, toggle the ‘yas
minor mode’ mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is ‘toggle’.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate ‘yas-minor-mode’.

The mode’s hook is called both when the mode is enabled and when
it is disabled.

When YASnippet mode is enabled, ‘yas-expand’, normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
key             binding
---             -------

C-c		Prefix Command

C-c &		Prefix Command

C-c & C-n	yas-new-snippet
C-c & C-s	yas-insert-snippet
C-c & C-v	yas-visit-snippet-file
